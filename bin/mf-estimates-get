#!/usr/bin/env python3
"""
Fetch analyst estimates from CapIQ.
"""
import json
import sys
import os
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

sys.path.insert(0, str(Path(__file__).parent.parent))
from src.datahub import DataHub

WORKSPACE = Path(os.getenv("WORKSPACE_ABS_PATH", "./runtime/workspace")).resolve()
assert WORKSPACE.is_absolute(), "WORKSPACE_ABS_PATH must be an absolute path"
assert WORKSPACE.is_absolute(), "WORKSPACE_ABS_PATH must be an absolute path"


def main():
    start_time = datetime.now()
    
    try:
        args = json.loads(sys.stdin.read() or "{}")
        ticker = args.get("ticker", "").upper()
        metric = args.get("metric", "revenue")  # e.g., "revenue","eps","ebitda",...
        years_future = int(args.get("years_future", 5))
        years_past = int(args.get("years_past", 0))
        currency = args.get("currency", "original")  # "original"|"usd"
        fmt = args.get("format", "concise")
        
        if not ticker:
            print(json.dumps({"ok": False, "error": "ticker required"}))
            sys.exit(1)
        
        hub = DataHub()
        est = hub.estimates(
            ticker=ticker,
            estimate_type=metric,
            years_future=years_future,
            years_past=years_past,
            currency=currency
        )
        
        out_dir = WORKSPACE / "raw" / "market" / ticker
        out_dir.mkdir(parents=True, exist_ok=True)
        out_path = out_dir / f"estimates_{metric}.json"
        out_path.write_text(est.model_dump_json(indent=2))
        
        elapsed = (datetime.now() - start_time).total_seconds() * 1000
        
        print(json.dumps({
            "ok": True,
            "result": {"estimates": str(out_path)},
            "paths": [str(out_path)],
            "provenance": [est.provenance.model_dump()],
            "metrics": {"t_ms": int(elapsed)},
            "format": fmt
        }))
        
    except Exception as e:
        print(json.dumps({
            "ok": False,
            "error": str(e),
            "hint": "Set CIQ_LOGIN/CIQ_PASSWORD; check metric name"
        }))
        sys.exit(1)


if __name__ == "__main__":
    main()

